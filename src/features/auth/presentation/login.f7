<template>
  <div class="page" data-name="login">
    <div class="navbar">
      <div class="navbar-inner sliding">
        <div class="title">Login</div>
      </div>
    </div>

    <div class="page-content">
      <div class="block">
        <form id="login-form">
          <div class="list no-hairlines-md">
            <ul>
              <li class="item-content item-input">
                <div class="item-inner">
                  <div class="item-title item-label">Email or Username</div>
                  <div class="item-input-wrap">
                    <input type="text" name="identifier" placeholder="Email or username" required />
                  </div>
                </div>
              </li>

              <li class="item-content item-input">
                <div class="item-inner">
                  <div class="item-title item-label">Password</div>
                  <div class="item-input-wrap">
                    <input type="password" name="password" placeholder="Password" required />
                  </div>
                </div>
              </li>
            </ul>
          </div>

          <div class="block">
            <button class="button button-fill" id="login-submit" type="submit">Login</button>
          </div>

          <div class="block">
            <a href="/auth/reset-request/">Forgot password?</a>
          </div>

        </form>
      </div>
    </div>
  </div>
</template>

<script>
import RestAPIService from "../../../services/restAPIService.js";
import AuthService from "../../../js/authService.js";
import AuthStore from "../../../js/authStore.js";

export default () => {
  return $render;
};

// Controller behavior
export function onPageInit(e, page) {
  const app = page.app;
  const form = page.$el.querySelector('#login-form');
  const authSvc = new AuthService(new RestAPIService({
    dataToPayload: (d) => JSON.stringify(d),
    payloadToData: (p) => p,
    getUrl: (route) => route,
  }));

  form.addEventListener('submit', async (ev) => {
    ev.preventDefault();
    const fd = new FormData(form);
    const identifier = fd.get('identifier');
    const password = fd.get('password');

    app.preloader.show();
    try {
      const res = await authSvc.login({ identifier, password });
      // res expected { token: '...', user: { ... } }
      await AuthStore.setAuth(res);
      app.preloader.hide();
      app.views.main.router.navigate('/', { reloadCurrent: true });
    } catch (err) {
      app.preloader.hide();
      app.dialog.alert(err.message || 'Login failed');
    }
  });
}

// register the page callback for framework7 router if needed
export const pageInit = onPageInit;